name: Regression Test

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - mauro/regression
    paths:
      - 'project/api/**'
  workflow_dispatch:
    

env:
  LOAD_TEST_RESOURCE: "azltops-loadtesting"
  LOAD_TEST_RESOURCE_GROUP: "azltops-rg-01"
  AZURE_FUNCTIONAPP_NAME: "azltops-func"
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'project/api' # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6.0.x' # set this to the dotnet version to use

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: pwsh
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
          
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: '${{ env.AZURE_FUNCTIONAPP_NAME }}'
          slot-name: 'production'
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

  loadTest:
    name: Load Test
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub Actions 
        uses: actions/checkout@v2
          
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: 'Azure Load Testing'
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: 'LoadTestConfig.yaml'
          loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}
          resourceGroup: ${{ env.LOAD_TEST_RESOURCE_GROUP }}
          env: |
            [
              {
              "name": "apiurl",
              "value": "${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
              }
            ]
      
      - uses: actions/upload-artifact@v2
        with:
          name: loadTestResults
          path: ${{ github.workspace }}/loadTest
